{"ast":null,"code":"import React,{useState}from'react';import'./InputGpt.css';import PrimaryButton from'../Components/PrimaryButton.js';import QuizObject from'../Components/QuizObject.js';import{Link}from'react-router-dom';import SecondaryButton from'../Components/SecondaryButton';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";function InputGpt(){const[textValue,setValue]=useState('');const[quantityValue,setQuantValue]=useState('');const[isCreating,setIsCreating]=useState(false);const[quizCreated,setQuizCreated]=useState(false);const[quiz,setQuiz]=useState(null);const[imageUrls,setImageUrls]=useState([]);const[isUploading,setIsUploading]=useState(false);const[uploaded,setUploaded]=useState(false);const createQuiz=async()=>{if(isUploading||uploaded){if(quantityValue){setIsCreating(true);setQuizCreated(false);try{// wait until uploaded is true to create quiz\nwhile(!uploaded){await new Promise(resolve=>setTimeout(resolve,1000));}const quizData=await QuizObject(quantityValue,textValue,imageUrls);setQuizCreated(true);setQuiz(quizData);}catch(error){console.error(\"Failed to create quiz:\",error);}finally{setIsCreating(false);}}else{alert(\"Please choose question number\");}}else if(textValue){if(quantityValue){setIsCreating(true);setQuizCreated(false);try{const quizData=await QuizObject(quantityValue,textValue,imageUrls);setQuizCreated(true);setQuiz(quizData);}catch(error){console.error(\"Failed to create quiz:\",error);}finally{setIsCreating(false);}}else{alert(\"Please choose question number\");}}else{alert(\"Please insert text or upload a file\");}};// const handleFileUpload = async (event) => {\n//     const file = event.target.files[0];\n//     if (file) {\n//         setIsUploading(true);\n//         const formData = new FormData();\n//         formData.append('file', file);\n//         try {\n//             const response = await fetch('http://localhost:5000/upload', {\n//                 method: 'POST',\n//                 body: formData,\n//             });\n//             if (!response.ok) {\n//                 throw new Error('Upload failed');\n//             }\n//             const data = await response.json();\n//             setUploaded(true);\n//             setIsUploading(false);\n//             setImageUrls(data.urls); // Set image URLs in state\n//         } catch (error) {\n//             console.error('Error uploading file:', error);\n//         }\n//     }\n// };\nconst handleChangeT=event=>{setValue(event.target.value);};const handleChangeQ=event=>{setQuantValue(event.target.value);};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Link,{id:\"ht-b\",to:\"/how-to\",children:/*#__PURE__*/_jsx(\"div\",{id:\"htd\",children:\"How To Use\"})}),/*#__PURE__*/_jsxs(\"div\",{id:\"main-container\",children:[/*#__PURE__*/_jsxs(\"div\",{id:\"description\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Upload Content to Generate Quiz\"}),/*#__PURE__*/_jsx(\"p\",{children:\"You may upload a PDF, PNG(s) or simply paste text into the textarea. The file/text must contain the information you wish GPT 4 to formulate the questions on. Select the desired number of questions and press create.\"})]}),/*#__PURE__*/_jsxs(\"div\",{id:\"input-container\",children:[/*#__PURE__*/_jsx(\"div\",{id:\"textbox\",children:/*#__PURE__*/_jsx(\"textarea\",{type:\"text\",cols:\"60\",rows:\"14\",value:textValue,onChange:handleChangeT,placeholder:\"Paste piece of text\",...(uploaded?{disabled:true}:{})})}),/*#__PURE__*/_jsxs(\"div\",{id:\"buttons\",children:[/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"input\",{type:\"number\",id:\"quantity\",name:\"quantity\",min:\"5\",max:\"50\",value:quantityValue,onChange:handleChangeQ})}),/*#__PURE__*/_jsx(\"div\",{id:\"spacer\"}),/*#__PURE__*/_jsx(SecondaryButton,{text:\"Upload\",id:\"upload-button\"// onClick={() => document.getElementById('file-upload').click()}\n// onclick pop alert\n,onClick:()=>alert('Upload feature is currently disabled. APIs are not available. Please use text function.')}),/*#__PURE__*/_jsx(\"input\",{type:\"file\",id:\"file-upload\",accept:\"application/pdf\",style:{display:'none'}// onChange={handleFileUpload}\n}),/*#__PURE__*/_jsx(\"div\",{id:\"spacer\"}),/*#__PURE__*/_jsx(PrimaryButton,{text:\"Create\",onClick:createQuiz})]})]}),isCreating||quizCreated?/*#__PURE__*/_jsx(\"div\",{className:\"overlay\",children:/*#__PURE__*/_jsxs(\"div\",{id:\"start-quiz\",children:[isCreating&&/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(\"div\",{className:\"disabledButton primaryButton\",children:/*#__PURE__*/_jsx(\"div\",{className:\"spinner\"})})}),quizCreated&&/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(Link,{to:\"/quiz-game\",state:{from:'InputGpt',quiz},children:/*#__PURE__*/_jsx(PrimaryButton,{text:\"Start Quiz\",className:\"fade-in\"})})})]})}):null]})]});}export default InputGpt;","map":{"version":3,"names":["React","useState","PrimaryButton","QuizObject","Link","SecondaryButton","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","InputGpt","textValue","setValue","quantityValue","setQuantValue","isCreating","setIsCreating","quizCreated","setQuizCreated","quiz","setQuiz","imageUrls","setImageUrls","isUploading","setIsUploading","uploaded","setUploaded","createQuiz","Promise","resolve","setTimeout","quizData","error","console","alert","handleChangeT","event","target","value","handleChangeQ","children","id","to","type","cols","rows","onChange","placeholder","disabled","name","min","max","text","onClick","accept","style","display","className","state","from"],"sources":["/Users/joaolabriola/Documents/GitHub/quiz/src/Pages/InputGpt.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './InputGpt.css';\nimport PrimaryButton from '../Components/PrimaryButton.js'\nimport QuizObject from '../Components/QuizObject.js';\nimport { Link } from 'react-router-dom';\nimport SecondaryButton from '../Components/SecondaryButton';\n\nfunction InputGpt() {\n    const [textValue, setValue] = useState('');\n    const [quantityValue, setQuantValue] = useState('');\n    const [isCreating, setIsCreating] = useState(false);\n    const [quizCreated, setQuizCreated] = useState(false);\n    const [quiz, setQuiz] = useState(null);\n    const [imageUrls, setImageUrls] = useState([]);\n    const [isUploading, setIsUploading] = useState(false);\n    const [uploaded, setUploaded] = useState(false);\n\n    const createQuiz = async () => {\n\n        if (isUploading || uploaded) {\n\n            if (quantityValue) {\n                setIsCreating(true);\n                setQuizCreated(false);\n                try {\n                    // wait until uploaded is true to create quiz\n                    while (!uploaded) {\n                        await new Promise(resolve => setTimeout(resolve, 1000));\n                    }\n                    const quizData = await QuizObject(quantityValue, textValue, imageUrls);\n                    setQuizCreated(true);\n                    setQuiz(quizData);\n                } catch (error) {\n                    console.error(\"Failed to create quiz:\", error);\n                } finally {\n                    setIsCreating(false);\n                }\n            } else {\n                alert(\"Please choose question number\");\n            }\n\n        } else if (textValue) {\n            if (quantityValue) {\n                setIsCreating(true);\n                setQuizCreated(false);\n                try {\n                    const quizData = await QuizObject(quantityValue, textValue, imageUrls);\n                    setQuizCreated(true);\n                    setQuiz(quizData);\n                } catch (error) {\n                    console.error(\"Failed to create quiz:\", error);\n                } finally {\n                    setIsCreating(false);\n                }\n            } else {\n                alert(\"Please choose question number\");\n            }\n        } else {\n            alert(\"Please insert text or upload a file\");\n        }\n    };\n\n    // const handleFileUpload = async (event) => {\n    //     const file = event.target.files[0];\n    //     if (file) {\n    //         setIsUploading(true);\n    //         const formData = new FormData();\n    //         formData.append('file', file);\n\n    //         try {\n    //             const response = await fetch('http://localhost:5000/upload', {\n    //                 method: 'POST',\n    //                 body: formData,\n    //             });\n\n    //             if (!response.ok) {\n    //                 throw new Error('Upload failed');\n    //             }\n\n    //             const data = await response.json();\n    //             setUploaded(true);\n    //             setIsUploading(false);\n    //             setImageUrls(data.urls); // Set image URLs in state\n    //         } catch (error) {\n    //             console.error('Error uploading file:', error);\n    //         }\n    //     }\n    // };\n\n    const handleChangeT = (event) => {\n        setValue(event.target.value);\n    };\n\n    const handleChangeQ = (event) => {\n        setQuantValue(event.target.value);\n    };\n\n    return (\n        <>\n            <Link id='ht-b' to='/how-to'><div id='htd'>How To Use</div></Link>\n            <div id='main-container'>\n                <div id='description'>\n                    <h4>Upload Content to Generate Quiz</h4>\n                    <p>You may upload a PDF, PNG(s) or simply paste text into the textarea.\n                        The file/text must contain the information you wish GPT 4 to\n                        formulate the questions on. Select the desired number\n                        of questions and press create.\n                    </p>\n                </div>\n                <div id='input-container'>\n                    <div id='textbox'>\n                        <textarea\n                            type=\"text\"\n                            cols='60'\n                            rows='14'\n                            value={textValue}\n                            onChange={handleChangeT}\n                            placeholder='Paste piece of text'\n                            {...(uploaded ? { disabled: true } : {})}\n                        >\n                        </textarea>\n                    </div>\n                    <div id='buttons'>\n                        <div>\n                            <input\n                                type=\"number\"\n                                id=\"quantity\"\n                                name=\"quantity\"\n                                min=\"5\"\n                                max=\"50\"\n                                value={quantityValue}\n                                onChange={handleChangeQ}\n                            />\n                        </div>\n                        <div id='spacer'></div>\n                        <SecondaryButton\n                            text='Upload'\n                            id='upload-button'\n                            // onClick={() => document.getElementById('file-upload').click()}\n                            // onclick pop alert\n                            onClick={() => alert('Upload feature is currently disabled. APIs are not available. Please use text function.')}\n                        />\n                        <input\n                            type=\"file\"\n                            id=\"file-upload\"\n                            accept=\"application/pdf\"\n                            style={{ display: 'none' }}\n                        // onChange={handleFileUpload}\n                        />\n                        <div id='spacer'></div>\n                        <PrimaryButton\n                            text='Create'\n                            onClick={createQuiz}\n                        />\n                    </div>\n                </div>\n                {isCreating || quizCreated ? (\n                    <div className=\"overlay\">\n                        <div id='start-quiz'>\n                            {isCreating &&\n                                <>\n                                    <div className='disabledButton primaryButton'>\n                                        <div className='spinner'></div>\n                                    </div>\n                                </>\n                            }\n                            {quizCreated &&\n                                <>\n                                    <Link\n                                        to='/quiz-game'\n                                        state={{ from: 'InputGpt', quiz }}>\n                                        <PrimaryButton\n                                            text='Start Quiz'\n                                            className='fade-in'\n                                        />\n                                    </Link>\n                                </>\n                            }\n                        </div>\n                    </div>\n                ) : null}\n            </div>\n        </>\n    );\n}\n\nexport default InputGpt;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}