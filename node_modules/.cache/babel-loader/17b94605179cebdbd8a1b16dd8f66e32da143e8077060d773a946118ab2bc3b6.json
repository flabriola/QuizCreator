{"ast":null,"code":"import React,{useState}from'react';import'./InputGpt.css';import PrimaryButton from'../Components/PrimaryButton.js';import QuizObject from'../Components/QuizObject.js';import{Link}from'react-router-dom';import SecondaryButton from'../Components/SecondaryButton';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";function InputGpt(){const[textValue,setValue]=useState('');const[quantityValue,setQuantValue]=useState('');const[isCreating,setIsCreating]=useState(false);const[quizCreated,setQuizCreated]=useState(false);const[quiz,setQuiz]=useState(null);const createQuiz=async()=>{if(textValue){if(quantityValue){setIsCreating(true);setQuizCreated(false);try{const quizData=await QuizObject(quantityValue,textValue);setQuizCreated(true);setQuiz(quizData);}catch(error){console.error(\"Failed to create quiz:\",error);}finally{setIsCreating(false);}}else{alert(\"Please choose question number\");}}else{alert(\"Please insert text\");}};const handleFileUpload=async event=>{const file=event.target.files[0];if(file&&file.type==='application/pdf'){// Convert PDF to images on the server side\ntry{const formData=new FormData();formData.append('file',file);const response=await fetch('/convert-pdf',{method:'POST',body:formData});const imageUrls=await response.json();console.log(imageUrls);// Use image URLs with your API\n}catch(error){console.error(\"Failed to upload and convert PDF:\",error);}}else{alert(\"Please upload a PDF file.\");}};const handleChangeT=event=>{setValue(event.target.value);};const handleChangeQ=event=>{setQuantValue(event.target.value);};return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(\"div\",{id:\"main-container\",children:[/*#__PURE__*/_jsxs(\"div\",{id:\"description\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Upload Content to Generate Quiz\"}),/*#__PURE__*/_jsx(\"p\",{children:\"You may upload a PDF, PNG(s) or simply paste text into the textarea. The file/text must contain the information you wish GPT 4 to formulate the questions on. Select the desired number of questions and press create.\"})]}),/*#__PURE__*/_jsxs(\"div\",{id:\"input-container\",children:[/*#__PURE__*/_jsx(\"div\",{id:\"textbox\",children:/*#__PURE__*/_jsx(\"textarea\",{type:\"text\",cols:\"60\",rows:\"14\",value:textValue,onChange:handleChangeT,placeholder:\"Paste piece of text\"})}),/*#__PURE__*/_jsxs(\"div\",{id:\"buttons\",children:[/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"input\",{type:\"number\",id:\"quantity\",name:\"quantity\",min:\"5\",max:\"50\",value:quantityValue,onChange:handleChangeQ})}),/*#__PURE__*/_jsx(\"div\",{id:\"spacer\"}),/*#__PURE__*/_jsx(SecondaryButton,{text:\"Upload\",id:\"upload-button\",onClick:()=>document.getElementById('file-upload').click()}),/*#__PURE__*/_jsx(\"input\",{type:\"file\",id:\"file-upload\",accept:\"application/pdf\",style:{display:'none'},onChange:handleFileUpload}),/*#__PURE__*/_jsx(\"div\",{id:\"spacer\"}),/*#__PURE__*/_jsx(PrimaryButton,{text:\"Create\",onClick:createQuiz})]})]}),isCreating||quizCreated?/*#__PURE__*/_jsx(\"div\",{className:\"overlay\",children:/*#__PURE__*/_jsxs(\"div\",{id:\"start-quiz\",children:[isCreating&&/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(\"div\",{className:\"disabledButton primaryButton\",children:/*#__PURE__*/_jsx(\"div\",{className:\"spinner\"})})}),quizCreated&&/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(Link,{to:\"/quiz-game\",state:{from:'InputGpt',quiz},children:/*#__PURE__*/_jsx(PrimaryButton,{text:\"Start Quiz\",className:\"fade-in\"})})})]})}):null]})});}export default InputGpt;","map":{"version":3,"names":["React","useState","PrimaryButton","QuizObject","Link","SecondaryButton","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","InputGpt","textValue","setValue","quantityValue","setQuantValue","isCreating","setIsCreating","quizCreated","setQuizCreated","quiz","setQuiz","createQuiz","quizData","error","console","alert","handleFileUpload","event","file","target","files","type","formData","FormData","append","response","fetch","method","body","imageUrls","json","log","handleChangeT","value","handleChangeQ","children","id","cols","rows","onChange","placeholder","name","min","max","text","onClick","document","getElementById","click","accept","style","display","className","to","state","from"],"sources":["/Users/joaolabriola/Documents/GitHub/quiz/src/Pages/InputGpt.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './InputGpt.css';\nimport PrimaryButton from '../Components/PrimaryButton.js'\nimport QuizObject from '../Components/QuizObject.js';\nimport { Link } from 'react-router-dom';\nimport SecondaryButton from '../Components/SecondaryButton';\n\nfunction InputGpt() {\n\n    const [textValue, setValue] = useState('');\n    const [quantityValue, setQuantValue] = useState('');\n    const [isCreating, setIsCreating] = useState(false);\n    const [quizCreated, setQuizCreated] = useState(false);\n    const [quiz, setQuiz] = useState(null);\n\n    const createQuiz = async () => {\n        if (textValue) {\n            if (quantityValue) {\n                setIsCreating(true);\n                setQuizCreated(false);\n                try {\n                    const quizData = await QuizObject(quantityValue, textValue);\n                    setQuizCreated(true);\n                    setQuiz(quizData);\n                } catch (error) {\n                    console.error(\"Failed to create quiz:\", error);\n                } finally {\n                    setIsCreating(false);\n                }\n            } else {\n                alert(\"Please choose question number\");\n            }\n        } else {\n            alert(\"Please insert text\");\n        }\n    };\n\n    const handleFileUpload = async (event) => {\n        const file = event.target.files[0];\n        if (file && file.type === 'application/pdf') {\n            // Convert PDF to images on the server side\n            try {\n                const formData = new FormData();\n                formData.append('file', file);\n                const response = await fetch('/convert-pdf', { method: 'POST', body: formData });\n                const imageUrls = await response.json();\n                console.log(imageUrls);\n                // Use image URLs with your API\n            } catch (error) {\n                console.error(\"Failed to upload and convert PDF:\", error);\n            }\n        } else {\n            alert(\"Please upload a PDF file.\");\n        }\n    };\n\n    const handleChangeT = (event) => {\n        setValue(event.target.value);\n    };\n\n    const handleChangeQ = (event) => {\n        setQuantValue(event.target.value);\n    };\n\n    return (\n        <>\n            <div id='main-container'>\n                <div id='description'>\n                    <h4>Upload Content to Generate Quiz</h4>\n                    <p>You may upload a PDF, PNG(s) or simply paste text into the textarea.\n                        The file/text must contain the information you wish GPT 4 to\n                        formulate the questions on. Select the desired number\n                        of questions and press create.\n                    </p>\n                </div>\n                <div id='input-container'>\n                    <div id='textbox'>\n                        <textarea\n                            type=\"text\"\n                            cols='60'\n                            rows='14'\n                            value={textValue}\n                            onChange={handleChangeT}\n                            placeholder='Paste piece of text'>\n                        </textarea>\n                    </div>\n                    <div id='buttons'>\n                        <div>\n                            <input\n                                type=\"number\"\n                                id=\"quantity\"\n                                name=\"quantity\"\n                                min=\"5\"\n                                max=\"50\"\n                                value={quantityValue}\n                                onChange={handleChangeQ}\n                            />\n                        </div>\n                        <div id='spacer'></div>\n                        <SecondaryButton\n                            text='Upload'\n                            id='upload-button'\n                            onClick={() => document.getElementById('file-upload').click()}\n                        />\n                        <input\n                            type=\"file\"\n                            id=\"file-upload\"\n                            accept=\"application/pdf\"\n                            style={{ display: 'none' }}\n                            onChange={handleFileUpload}\n                        />\n                        <div id='spacer'></div>\n                        <PrimaryButton\n                            text='Create'\n                            onClick={createQuiz}\n                        />\n                    </div>\n                </div>\n                {isCreating || quizCreated ? (\n                    <div className=\"overlay\">\n                        <div id='start-quiz'>\n                            {isCreating &&\n                                <>\n                                    <div className='disabledButton primaryButton'>\n                                        <div className='spinner'></div>\n                                    </div>\n                                </>\n                            }\n                            {quizCreated &&\n                                <>\n                                    <Link\n                                        to='/quiz-game'\n                                        state={{ from: 'InputGpt', quiz }}>\n                                        <PrimaryButton\n                                            text='Start Quiz'\n                                            className='fade-in'\n                                        />\n                                    </Link>\n                                </>\n                            }\n                        </div>\n                    </div>\n                ) : null}\n\n            </div>\n        </>\n    );\n}\n\nexport default InputGpt;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,gBAAgB,CACvB,MAAO,CAAAC,aAAa,KAAM,gCAAgC,CAC1D,MAAO,CAAAC,UAAU,KAAM,6BAA6B,CACpD,OAASC,IAAI,KAAQ,kBAAkB,CACvC,MAAO,CAAAC,eAAe,KAAM,+BAA+B,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,gCAAAC,QAAA,IAAAC,SAAA,yBAE5D,QAAS,CAAAC,QAAQA,CAAA,CAAG,CAEhB,KAAM,CAACC,SAAS,CAAEC,QAAQ,CAAC,CAAGb,QAAQ,CAAC,EAAE,CAAC,CAC1C,KAAM,CAACc,aAAa,CAAEC,aAAa,CAAC,CAAGf,QAAQ,CAAC,EAAE,CAAC,CACnD,KAAM,CAACgB,UAAU,CAAEC,aAAa,CAAC,CAAGjB,QAAQ,CAAC,KAAK,CAAC,CACnD,KAAM,CAACkB,WAAW,CAAEC,cAAc,CAAC,CAAGnB,QAAQ,CAAC,KAAK,CAAC,CACrD,KAAM,CAACoB,IAAI,CAAEC,OAAO,CAAC,CAAGrB,QAAQ,CAAC,IAAI,CAAC,CAEtC,KAAM,CAAAsB,UAAU,CAAG,KAAAA,CAAA,GAAY,CAC3B,GAAIV,SAAS,CAAE,CACX,GAAIE,aAAa,CAAE,CACfG,aAAa,CAAC,IAAI,CAAC,CACnBE,cAAc,CAAC,KAAK,CAAC,CACrB,GAAI,CACA,KAAM,CAAAI,QAAQ,CAAG,KAAM,CAAArB,UAAU,CAACY,aAAa,CAAEF,SAAS,CAAC,CAC3DO,cAAc,CAAC,IAAI,CAAC,CACpBE,OAAO,CAACE,QAAQ,CAAC,CACrB,CAAE,MAAOC,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAAC,CAClD,CAAC,OAAS,CACNP,aAAa,CAAC,KAAK,CAAC,CACxB,CACJ,CAAC,IAAM,CACHS,KAAK,CAAC,+BAA+B,CAAC,CAC1C,CACJ,CAAC,IAAM,CACHA,KAAK,CAAC,oBAAoB,CAAC,CAC/B,CACJ,CAAC,CAED,KAAM,CAAAC,gBAAgB,CAAG,KAAO,CAAAC,KAAK,EAAK,CACtC,KAAM,CAAAC,IAAI,CAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAClC,GAAIF,IAAI,EAAIA,IAAI,CAACG,IAAI,GAAK,iBAAiB,CAAE,CACzC;AACA,GAAI,CACA,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,CAAEN,IAAI,CAAC,CAC7B,KAAM,CAAAO,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,cAAc,CAAE,CAAEC,MAAM,CAAE,MAAM,CAAEC,IAAI,CAAEN,QAAS,CAAC,CAAC,CAChF,KAAM,CAAAO,SAAS,CAAG,KAAM,CAAAJ,QAAQ,CAACK,IAAI,CAAC,CAAC,CACvChB,OAAO,CAACiB,GAAG,CAACF,SAAS,CAAC,CACtB;AACJ,CAAE,MAAOhB,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,mCAAmC,CAAEA,KAAK,CAAC,CAC7D,CACJ,CAAC,IAAM,CACHE,KAAK,CAAC,2BAA2B,CAAC,CACtC,CACJ,CAAC,CAED,KAAM,CAAAiB,aAAa,CAAIf,KAAK,EAAK,CAC7Bf,QAAQ,CAACe,KAAK,CAACE,MAAM,CAACc,KAAK,CAAC,CAChC,CAAC,CAED,KAAM,CAAAC,aAAa,CAAIjB,KAAK,EAAK,CAC7Bb,aAAa,CAACa,KAAK,CAACE,MAAM,CAACc,KAAK,CAAC,CACrC,CAAC,CAED,mBACItC,IAAA,CAAAI,SAAA,EAAAoC,QAAA,cACItC,KAAA,QAAKuC,EAAE,CAAC,gBAAgB,CAAAD,QAAA,eACpBtC,KAAA,QAAKuC,EAAE,CAAC,aAAa,CAAAD,QAAA,eACjBxC,IAAA,OAAAwC,QAAA,CAAI,iCAA+B,CAAI,CAAC,cACxCxC,IAAA,MAAAwC,QAAA,CAAG,wNAIH,CAAG,CAAC,EACH,CAAC,cACNtC,KAAA,QAAKuC,EAAE,CAAC,iBAAiB,CAAAD,QAAA,eACrBxC,IAAA,QAAKyC,EAAE,CAAC,SAAS,CAAAD,QAAA,cACbxC,IAAA,aACI0B,IAAI,CAAC,MAAM,CACXgB,IAAI,CAAC,IAAI,CACTC,IAAI,CAAC,IAAI,CACTL,KAAK,CAAEhC,SAAU,CACjBsC,QAAQ,CAAEP,aAAc,CACxBQ,WAAW,CAAC,qBAAqB,CAC3B,CAAC,CACV,CAAC,cACN3C,KAAA,QAAKuC,EAAE,CAAC,SAAS,CAAAD,QAAA,eACbxC,IAAA,QAAAwC,QAAA,cACIxC,IAAA,UACI0B,IAAI,CAAC,QAAQ,CACbe,EAAE,CAAC,UAAU,CACbK,IAAI,CAAC,UAAU,CACfC,GAAG,CAAC,GAAG,CACPC,GAAG,CAAC,IAAI,CACRV,KAAK,CAAE9B,aAAc,CACrBoC,QAAQ,CAAEL,aAAc,CAC3B,CAAC,CACD,CAAC,cACNvC,IAAA,QAAKyC,EAAE,CAAC,QAAQ,CAAM,CAAC,cACvBzC,IAAA,CAACF,eAAe,EACZmD,IAAI,CAAC,QAAQ,CACbR,EAAE,CAAC,eAAe,CAClBS,OAAO,CAAEA,CAAA,GAAMC,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAC,CAACC,KAAK,CAAC,CAAE,CACjE,CAAC,cACFrD,IAAA,UACI0B,IAAI,CAAC,MAAM,CACXe,EAAE,CAAC,aAAa,CAChBa,MAAM,CAAC,iBAAiB,CACxBC,KAAK,CAAE,CAAEC,OAAO,CAAE,MAAO,CAAE,CAC3BZ,QAAQ,CAAEvB,gBAAiB,CAC9B,CAAC,cACFrB,IAAA,QAAKyC,EAAE,CAAC,QAAQ,CAAM,CAAC,cACvBzC,IAAA,CAACL,aAAa,EACVsD,IAAI,CAAC,QAAQ,CACbC,OAAO,CAAElC,UAAW,CACvB,CAAC,EACD,CAAC,EACL,CAAC,CACLN,UAAU,EAAIE,WAAW,cACtBZ,IAAA,QAAKyD,SAAS,CAAC,SAAS,CAAAjB,QAAA,cACpBtC,KAAA,QAAKuC,EAAE,CAAC,YAAY,CAAAD,QAAA,EACf9B,UAAU,eACPV,IAAA,CAAAI,SAAA,EAAAoC,QAAA,cACIxC,IAAA,QAAKyD,SAAS,CAAC,8BAA8B,CAAAjB,QAAA,cACzCxC,IAAA,QAAKyD,SAAS,CAAC,SAAS,CAAM,CAAC,CAC9B,CAAC,CACR,CAAC,CAEN7C,WAAW,eACRZ,IAAA,CAAAI,SAAA,EAAAoC,QAAA,cACIxC,IAAA,CAACH,IAAI,EACD6D,EAAE,CAAC,YAAY,CACfC,KAAK,CAAE,CAAEC,IAAI,CAAE,UAAU,CAAE9C,IAAK,CAAE,CAAA0B,QAAA,cAClCxC,IAAA,CAACL,aAAa,EACVsD,IAAI,CAAC,YAAY,CACjBQ,SAAS,CAAC,SAAS,CACtB,CAAC,CACA,CAAC,CACT,CAAC,EAEN,CAAC,CACL,CAAC,CACN,IAAI,EAEP,CAAC,CACR,CAAC,CAEX,CAEA,cAAe,CAAApD,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}